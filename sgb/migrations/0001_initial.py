# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-11-29 17:49
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Aluno',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aluno_nome', models.CharField(max_length=100)),
                ('aluno_telefone', models.CharField(max_length=11, validators=[django.core.validators.RegexValidator('^\\d{10,11}$', 'Digite um número de matricula válido')])),
                ('aluno_matricula', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'Digite um número de matricula válido')])),
                ('aluno_email', models.EmailField(max_length=254)),
                ('curso', models.CharField(choices=[('Ciência da Computação', 'Ciência da Computação'), ('Sistemas para Internet', 'Sistemas para Internet'), ('Gestão da Tecnologia da Informação', 'Gestão da Tecnologia da Informação'), ('Redes de Computadores', 'Redes de Computadores')], max_length=50)),
                ('periodo', models.CharField(choices=[('P5', '5° '), ('P7', '7° '), ('P8', '8° ')], max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Banca',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hora_inicio', models.CharField(max_length=5, validators=[django.core.validators.RegexValidator('^[012]\\d:[0-5]\\d')])),
                ('data_banca', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Curso',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('curso_nome', models.CharField(choices=[('Ciência da Computação', 'Ciência da Computação'), ('Sistemas para Internet', 'Sistemas para Internet'), ('Gestão da Tecnologia da Informação', 'Gestão da Tecnologia da Informação'), ('Redes de Computadores', 'Redes de Computadores')], max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Disponibilidade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField()),
                ('hora_inicio', models.CharField(max_length=5, validators=[django.core.validators.RegexValidator('^[012]\\d:[0-5]\\d')])),
                ('situacao', models.CharField(choices=[('1', 'Não Relacionado'), ('2', 'Relacionado')], default='1', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('professor_nome', models.CharField(max_length=100)),
                ('professor_matricula', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'Digite um número de matricula válido')])),
                ('area_de_atuacao', models.CharField(max_length=50)),
                ('formacao', models.CharField(choices=[('ESP', 'ESPECIALISTA'), ('MS', 'MESTRE'), ('DR', 'DOUTOR'), ('PÓS Dr', 'PÓS DOUTORADO')], max_length=100)),
                ('graduacao', models.CharField(max_length=500)),
                ('especializacao', models.CharField(blank=True, max_length=500)),
                ('mestrado', models.CharField(blank=True, max_length=500)),
                ('doutorado', models.CharField(blank=True, max_length=500)),
                ('pos_doutorado', models.CharField(blank=True, max_length=500)),
                ('area_de_conhecimentos', models.CharField(max_length=500)),
                ('area_de_orientacao', models.CharField(max_length=500)),
                ('info_relevante', models.CharField(blank=True, max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Salas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blocos', models.CharField(choices=[('EVA', 'EVA'), ('CT', 'CENTRO DE TECNOLOGIA'), ('B.F', 'BLOCO F')], max_length=3)),
                ('numero_do_bloco', models.CharField(max_length=3, unique=True, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'Digite um número de sala válido')])),
            ],
        ),
        migrations.CreateModel(
            name='Tcc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo_tcc', models.CharField(max_length=220, unique=True)),
                ('situacao', models.CharField(default='1', max_length=1)),
                ('aluno', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='aluno', to='sgb.Aluno')),
                ('aluno2', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='aluno2', to='sgb.Aluno')),
                ('aluno3', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='aluno3', to='sgb.Aluno')),
                ('aluno4', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='aluno4', to='sgb.Aluno')),
                ('orientador', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sgb.Professor')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=50, unique=True, verbose_name='Username')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=50, verbose_name='Password')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='salas',
            unique_together=set([('blocos', 'numero_do_bloco')]),
        ),
        migrations.AddField(
            model_name='disponibilidade',
            name='examinador',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='examinador', to='sgb.Professor'),
        ),
        migrations.AddField(
            model_name='curso',
            name='coordenador',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.PROTECT, related_name='coordenador', to='sgb.Professor'),
        ),
        migrations.AddField(
            model_name='banca',
            name='examinador_1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='examinador1', to='sgb.Disponibilidade'),
        ),
        migrations.AddField(
            model_name='banca',
            name='examinador_2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='examinador2', to='sgb.Disponibilidade'),
        ),
        migrations.AddField(
            model_name='banca',
            name='sala',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sala', to='sgb.Salas'),
        ),
        migrations.AddField(
            model_name='banca',
            name='titulo_tcc',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='sgb.Tcc'),
        ),
        migrations.AlterUniqueTogether(
            name='disponibilidade',
            unique_together=set([('data', 'hora_inicio', 'examinador')]),
        ),
        migrations.AlterUniqueTogether(
            name='banca',
            unique_together=set([('sala', 'hora_inicio', 'data_banca')]),
        ),
    ]
